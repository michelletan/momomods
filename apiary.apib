FORMAT: 1A
HOST: http://momomods.apiblueprint.org/

# MoMoMods

MoMoMods helps you plan your timetable with friends!

## Timetable [/{year}/{sem}/timetable]

### Get Timetable for year and sem [GET]

Timetable with all its modules and the modules' information is returned in the response.

+ Response 200 (application/json)

        {
            "id": 1,
            "userId": 1,
            "year": "2016-2017",
            "semester": 1,
            "createdAt": "2016-09-12T08:51:25.000Z",
            "updatedAt": "2016-09-12T08:51:25.000Z",
            "last_synced": "2016-09-08T00:09:35+00:00",
            "timetableModules": [
                {
                    "id": 1,
                    "timetableId": 1,
                    "moduleId": 1,
                    "lessonType": "Lecture",
                    "classNumber": "1",
                    "module": {
                        "module_code": "CS1010",
                        "lesson_type": "sectional",
                        "class_number": "1"
                    }
                }
            ]
        }

### Update modules in Timetable [POST]

Timetable will be updated with all module data given in post request.
The response is the complete timetable for year and sem with the module added.

+ Request (application/json)

        [
            {
                "ClassNo": "V01",
                "LessonType": "Tutorial",
                "WeekText": "Every Week",
                "DayText": "Thursday",
                "StartTime": "1400",
                "EndTime": "1500",
                "Venue": "BIZ2-0303",
                "ModuleCode": "ACC1002",
                "ModuleTitle": "Financial Accounting",
                "moduleDetail": {
                    "id": 3364,
                    "year": "2016-2017",
                    "semester": 1,
                    "code": "ACC1002",
                    "title": "Financial Accounting",
                    "description": "The course provides an introduction to financial accounting.",
                    "department": "Accounting",
                    "credit": 4,
                    "workload": "2-2-0-3-4",
                    "prerequisite": null,
                    "preclusion": "Students who have passed FNA1002 are not allowed to take ACC1002.",
                    "examDate": "2016-11-26T05:00:00.000Z",
                    "timetable": "[{\"ClassNo\":\"V15\",\"LessonType\":\"Tutorial\",\"WeekText\":\"Every Week\",\"DayText\":\"Friday\",\"StartTime\":\"1300\",\"EndTime\":\"1400\",\"Venue\":\"BIZ2-0228\"}]",
                    "createdAt": "2016-09-12T08:51:52.204Z",
                    "updatedAt": "2016-09-12T08:51:52.209Z"
                }
            },
            {
                "ClassNo": "V2",
                "LessonType": "Lecture",
                "WeekText": "Every Week",
                "DayText": "Wednesday",
                "StartTime": "1000",
                "EndTime": "1200",
                "Venue": "LT17",
                "ModuleCode": "ACC1002",
                "moduleDetail": {
                    "id": 3364,
                    "year": "2016-2017",
                    "semester": 1,
                    "code": "ACC1002",
                    "title": "Financial Accounting",
                    "description": "The course provides an introduction to financial accounting.",
                    "department": "Accounting",
                    "credit": 4,
                    "workload": "2-2-0-3-4",
                    "prerequisite": null,
                    "preclusion": "Students who have passed FNA1002 are not allowed to take ACC1002.",
                    "examDate": "2016-11-26T05:00:00.000Z",
                    "timetable": "[{\"ClassNo\":\"V15\",\"LessonType\":\"Tutorial\",\"WeekText\":\"Every Week\",\"DayText\":\"Friday\",\"StartTime\":\"1300\",\"EndTime\":\"1400\",\"Venue\":\"BIZ2-0228\"}]",
                    "createdAt": "2016-09-12T08:51:52.204Z",
                    "updatedAt": "2016-09-12T08:51:52.209Z"
                },
                "isAvailable": false
            }
        ]

+ Response 201 (application/json)

        {
        
        }
        
## Team Collection [/{year}/{sem}/team]

### List all teams I belong to [GET]

Lists all teams that includes user as a member. All members of each team are also returned in the response.

+ Response 200 (application/json)

        [
            {
                "createdBy": {
                    "userId": "1",
                    "name": "Niko"
                },
                "teamId": "1",
                "teamName": "3216 assignment 3",
                "members": [
                    {
                        "userId": "1", 
                        "name": "Niko",
                        "acceptInvitation": 1
                    },
                    {
                        "userId": "2", 
                        "name": "Mich",
                        "acceptInvitation": 0
                    }
                ]
            },
            {
                "createdBy": {
                    "userId": "3",
                    "name": "Zhi An"
                },
                "teamId": "2",
                "teamName": "3216 final project",
                "members": [
                    {
                        "userId": "1", 
                        "name": "Niko",
                        "acceptInvitation": 1
                    },
                    {
                        "userId": "3", 
                        "name": "Zhi An",
                        "acceptInvitation": 1
                    }
                ]
            }
        ]

### Create a new team [POST]

Creates a new team. Creator of team is automatically added as a member who has accepted the invitation to be part of the team.

+ Request (application/json)

        [
            {
                "teamName": "3216 final project"
            }
        ]

+ Response 201 (application/json)

        {
            "createdBy": {
                "userId": "1",
                "name": "Niko"
            },
            "teamId": "3",
            "teamName": "3216 final project",
            "members": [
                {
                    "userId": "1", 
                    "name": "Niko",
                    "acceptInvitation": 1
                }
            ]
        }
        
## Team [/team/{id}]

### Get team info [GET]

This request needs a date query.
E.g. /team/1?date=2016-09-17

Note: date format must be yyyy-mm-dd 

If no date query is entered or date is not within the team's semester, an error is returned.

Returns all team members as well as all members' timetable information.

+ Response 400 (application/json)

        {
            "error": "Please specify a date query."
        }

+ Response 400 (application/json)

        {
            "error": "Please specify a date query within the semester in which the group is formed."
        }

+ Response 200 (application/json)

        {
            "holiday": "Recess Week"
        }

+ Response 200 (application/json)

        {
            "freeTimeMessage": "Free Time Slots: 0600 to 1100 | 1200 to 1400 | 1700 to 2359";
            "createdBy": {
                "userId": "3",
                "name": "Zhi An"
            },
            "teamId": "{id}",
            "teamName": "3216 final project",
            "year": "2016-2017",
            "semester": "1",
            "members": [
                {
                    "userId": "1", 
                    "name": "Niko",
                    "acceptInvitation": 1,
                    "timetable": [
                        {
                            "id": 2,
                            "timetableId": 1,
                            "moduleId": 514,
                            "lessonType": "Laboratory",
                            "classNumber": 1,
                            "createdAt": "2016-09-12T08:26:51.449Z",
                            "updatedAt": "2016-09-12T08:26:51.449Z",
                            "module": {
                                "id": 514,
                                "year": "2016-2017",
                                "semester": 1,
                                "code": "CS1010",
                                "title": "Programming Methodology",
                                "description": "This is CS1010.",
                                "department": "Computer Science",
                                "credit": 4,
                                "workload": "2-1-1-3-3",
                                "prerequisite": null,
                                "preclusion": "CG1101, CS1010E",
                                "examDate": "2016-11-23T01:00:00.000Z",
                                "timetable": {
                                    "ClassNo": 1,
                                    "LessonType": "Laboratory",
                                    "WeekText": "Odd Week",
                                    "DayText": "Wednesday",
                                    "StartTime": "1400",
                                    "EndTime": "1700",
                                    "Venue": "S12-0402"
                                },
                                "createdAt": "2016-09-12T08:33:46.506Z",
                                "updatedAt": "2016-09-12T08:33:46.507Z"
                            }
                        },
                        {
                            "id": 3,
                            "timetableId": 1,
                            "moduleId": 522,
                            "lessonType": "Tutorial",
                            "classNumber": "4",
                            "createdAt": "2016-09-12T08:26:51.450Z",
                            "updatedAt": "2016-09-12T08:26:51.450Z",
                            "module": {
                                "id": 522,
                                "year": "2016-2017",
                                "semester": 1,
                                "code": "CS1231",
                                "title": "Discrete Structures",
                                "description": "This is CS1231",
                                "department": "Computer Science",
                                "credit": 4,
                                "workload": "3-1-0-3-3",
                                "prerequisite": "A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X",
                                "preclusion": "MA1100",
                                "examDate": "2016-11-23T09:00:00.000Z",
                                "timetable": {
                                    "ClassNo": "4",
                                    "LessonType": "Tutorial",
                                    "WeekText": "Every Week",
                                    "DayText": "Wednesday",
                                    "StartTime": "1100",
                                    "EndTime": "1200",
                                    "Venue": "COM1-0209"
                                },
                                "createdAt": "2016-09-12T08:33:46.542Z",
                                "updatedAt": "2016-09-12T08:33:46.542Z"
                            }
                        }
                    ]
                },
                {
                    "userId": "3", 
                    "name": "Zhi An",
                    "acceptInvitation": 0,
                    "timetable": [
                    ]
                }
            ]
        }

### Invite new users to team [POST]

Invite users to a team. Only works if inviter is already a member of the team who has accepted the invitation to be part of the team.

Request needs an array of userIds. 

Response includes only the added members with acceptInvitation set as 0. Response does not include all previous members of the team.

+ Request (application/json)

        [ "1", "2" ]

+ Response 201 (application/json)

        {
            "createdBy": {
                "userId": "3",
                "name": "Zhi An"
            },
            "teamId": "{id}",
            "teamName": "3216 final project",
            "year": "2016-2017",
            "semester": "1",
            "addedMembers": [
                {
                    "userId": "1", 
                    "name": "Niko",
                    "acceptInvitation": 0
                },
                {
                    "userId": "2", 
                    "name": "Mich",
                    "acceptInvitation": 0
                }
            ]
        }

### Accept invitation to team [PUT]

+ Request (application/json)



+ Response 200 (application/json)

        {
            "teamId": "{id}",
            "userId": "1",
            "acceptInvitation": 1
        }

### Reject invitation to team / Remove yourself from team [DELETE]

+ Request (application/json)



+ Response 200 (application/json)

        {
            "removed": true
        }

## Friends [/{year}/{sem}/friends]

### Get users who take same modules [GET]

+ Response 200 (application/json)

        [
            {
                "name": "Niko",
                "id": "2"
            },
            {
                "name": "Mich",
                "id": "3"
            },
            {
                "name": "Pat",
                "id": "4"
            }
        ]